ifelse(df_in[,distr[j]]=="none"|df_in[,distr[j]]=="","No Disturbance",paste0("Disturbance is ",df_in[,distr[j]])),"; ",
switch(c(1:3)[c(df_in[,s_dis[j]]==""&df_in[,s_con[j]]=="",
(df_in[,s_dis[j]]==""&!df_in[,s_con[j]]=="")|(!df_in[,s_dis[j]]==""&df_in[,s_con[j]]==""),
!df_in[,s_dis[j]]==""&!df_in[,s_con[j]]=="")],"",paste0("Soil is ",df_in[,s_dis[j]],df_in[,s_con[j]]),
paste("Soil is",df_in[,s_dis[j]],"and", df_in[,s_con[j]]))
,"; ",
ifelse(df_in[,ra[j]]=="","",paste0("Root abundance is ",df_in[,ra[j]])),"; ",
ifelse(is.na(df_in[,tt[j]]),"No Thatch",paste0("Thatch thickness is ",df_in[,tt[j]]," cm")),
ifelse(is.na(df_in[,tt[j]])|df_in[,tt[j]]==0, "", paste0("; Accretion measured to ", df_in[,abv_t[j]]," thatch")),
ifelse(df_in[,other[j]]=="", "", paste0("; ", df_in[,other[j]])))
}
cims_output$Notes<-rep(unlist(txt),each=4)
#clean up
who<-which(unlist(sapply(cims_output,function(x)length(x)))==0)
for(i in who)cims_output[[i]]<-rep(NA,12)
rmv<-which(cims_output$`Core Conditions`=="core_not_sampled")
out_df<-as.data.frame(cims_output,check.names = F)
#write it out
out_path<-paste0(paste(paste0(path,"Output/USGS"),df_in[,site_column],paste0("ACC",df_in$`Plot Set`),format(dt,"%Y_%m_%d"),sep ="_"),".xlsx")
sheets<-list("Survey123_rawdata"=df_in,"CIMS"=out_df[-rmv,])
write_xlsx(sheets,out_path,format_headers = F)
}
input_data<-read.csv(paste0(path,"/Input/Acc2023_Survey123data.csv"),check.names = F)
output_names<-c("Station ID","Group","Sample Date (mm/dd/yyyy)",
"Sample Time (hh:mm)","Establishment Date (mm/dd/yyyy)",
"Establishment Time (hh:mm)","Time Zone",	"Core X:Y",
"Accretion Measurement 1 (mm)",	"Accretion Measurement 2 (mm)",
"Accretion Measurement 3 (mm)",	"Accretion Measurement 4 (mm)",
"Core Conditions","Organization",	"Personnel", "Notes")
#find where site is listed
site_column<-grep("Site",names(input_data))
sample_date_column<-grep("Time",names(input_data))
len<-dim(input_data)[1]
for(file in 1:len){
#create output data.frame
cims_output<-sapply(output_names,function(x)NULL)
df_in<-input_data[file,]
#Station ID
plt_stf<-paste(df_in[,site_column],
c(df_in$`Station A`,df_in$`Station B`,df_in$`Station C`),sep="-")
#cleanup the "finished" tag
cims_output$`Station ID`<-rep(sapply(strsplit(plt_stf,"_"),"[",1),each=4)
#Group
cims_output$Group<-rep(df_in$`Plot Set`,12)
#sample date
dt<-as.POSIXct(df_in[,sample_date_column],tz = "GMT",format="%m/%d/%y %H:%M")
if(is.na(dt))dt<-as.POSIXct(df_in[,sample_date_column],tz = "GMT",format="%m/%d/%Y %H:%M")
cims_output$`Sample Date (mm/dd/yyyy)`<-rep(format(dt,"%m/%d/%Y"),12)
CST_time<-dt-(6*60*60)
cims_output$`Sample Time (hh:mm)`<-rep(format(CST_time,tz="GMT",format = "%H:%M"),12)
#Establishment Date and time
#use ref_list
who<-which(ref_list[[df_in$`Plot Set`]]$Site.ID==df_in[,site_column])
cims_output$`Establishment Date (mm/dd/yyyy)`<-rep(ref_list[[df_in$`Plot Set`]]$Estab.Date[who],12)
cims_output$`Establishment Time (hh:mm)`<-rep(ref_list[[df_in$`Plot Set`]]$Estab.Time[who],12)
#Time Zone
cims_output$`Time Zone`<-rep("CST",12)
#Measuresments (will inform Core X:Y)
who<-grep("Measurement",names(df_in))
mss<-matrix(as.numeric(df_in[,who]),nrow=12,ncol=4,byrow = T)
rownames(mss)<-paste(rep(c("s1","s2","s3"),each=4),paste0("core",c("1","2","3","alt")),sep = "_")
#mss_new<-mss[c(1,2,3,5,6,7,9,10,11),]
#dims<-matrix(c(1,2,3,5,6,7,9,10,11),nrow=3,ncol=3)
#dims_new<-matrix(c(1:9),nrow=3,ncol=3)
#need_alt<-rep(NA,3)
#for(i in 1:3){
#  temp<-any(ans<-apply(mss[dims[,i],],1,function(x)all(is.na(x))))
#  if(temp&!all(is.na(mss[as.numeric(max(dims[,i])+1),]))){
#    mss_new[dims_new[,i][min(which(ans))],]<-mss[as.numeric(max(dims[,i])+1),]
#    need_alt[i]<-dims_new[,i][min(which(ans))]
#  }
#}
cims_output$`Accretion Measurement 1 (mm)`<-unname(mss[,1])
cims_output$`Accretion Measurement 2 (mm)`<-unname(mss[,2])
cims_output$`Accretion Measurement 3 (mm)`<-unname(mss[,3])
cims_output$`Accretion Measurement 4 (mm)`<-unname(mss[,4])
#Core x:y
who<-grep("Core Coordinates",names(df_in))
core_cord<-as.character(df_in[,who])
#core_cord[which(core_cord=="")]<-NA
#  if(!is.na(need_alt[1]))core_cord[need_alt[1]]<-df_in[who[4]]
#  if(!is.na(need_alt[2]))core_cord[need_alt[2]]<-df_in[who[8]]
#  if(!is.na(need_alt[3]))core_cord[need_alt[3]]<-df_in[who[12]]
cims_output$`Core X:Y`<-unname(core_cord)
#Core conditions
who<-grep("Condition",names(df_in))
cond_2<-as.character(df_in[,who])
cond_2[cond_2=="NA"]<-""
#core_cond[which(core_cond=="")]<-NA
#if(!is.na(need_alt[1]))core_cond[need_alt[1]]<-df_in[who[4]]
#if(!is.na(need_alt[2]))core_cond[need_alt[2]]<-df_in[who[8]]
#if(!is.na(need_alt[3]))core_cond[need_alt[3]]<-df_in[who[12]]
tst<-apply(mss,1,function(x)sum(!is.na(x)))
feld<-grep("Feldspar Quality",names(df_in))
feld_q<-as.character(df_in[,feld])
cond_1<-rep("",12)
cond_1[feld_q=="solid"&tst==4]<-"Excellent (solid feldspar; n=4)"
cond_1[feld_q=="broken"&tst==4]<-"Good (broken feldspar; n=4)"
cond_1[feld_q=="broken"&tst==3]<-"Fair (broken feldspar; n=3)"
cond_1[feld_q=="broken"&tst==2]<-"Poor (broken feldspar; n=2)"
cond_1[feld_q=="broken"&tst==1]<-"Poor (broken feldspar; n=1)"
cond_1[tst==0]<-"No Feldspar"
core_cond<-rep("",12)
core_cond[cond_2==""]<-cond_1[cond_2==""]
core_cond[!cond_2==""]<-paste0(cond_1,"; ",cond_2)[!cond_2==""]
#core_cond[feld_q=="none"]<-"none"
core_cond[feld_q=="core_not_sampled"]<-"core_not_sampled"
cims_output$`Core Conditions`<-core_cond
#Organization
org<-structure("U.S. GEOL SURVEY (USGS)",names=df_in$Organization)
if(df_in$Organization%in%names(org))cims_output$Organization<-rep(structure(org[df_in$Organization],names=NULL),12) else
cims_output$Organization<-rep(df_in$Organization,12)
#Personnel
cims_output$Personnel<-rep(df_in$`Field Personnel`,12)
#Notes
fld<-grep("If not flooded",names(df_in))
wd<-grep("Water depth",names(df_in))
vh<-grep("Vegetation Health",names(df_in))
dvs<-grep("Dominant Vegetation Species",names(df_in))
distr<-grep("Disturbance",names(df_in))
s_dis<-grep("Soil Description",names(df_in))
s_con<-grep("Soil Consistency",names(df_in))
ra<-grep("Root Abundance",names(df_in))
tt<-grep( "Thatch Thickness",names(df_in))
abv_t<-grep("above or below",names(df_in))
other<-grep("Other Notes",names(df_in))
txt<-list()
for(j in 1:3){
txt[[j]]<-paste0("Site is ",ifelse(df_in[,fld[j]]=="","flooded",df_in[,fld[j]]),"; ",
"Water depth is ",df_in[,wd[j]]," cm; ",
"Vegetation is ", df_in[,vh[j]],"; ",
"Dominant species is ",df_in[,dvs[j]],"; ",
ifelse(df_in[,distr[j]]=="none"|df_in[,distr[j]]=="","No Disturbance",paste0("Disturbance is ",df_in[,distr[j]])),"; ",
switch(c(1:3)[c(df_in[,s_dis[j]]==""&df_in[,s_con[j]]=="",
(df_in[,s_dis[j]]==""&!df_in[,s_con[j]]=="")|(!df_in[,s_dis[j]]==""&df_in[,s_con[j]]==""),
!df_in[,s_dis[j]]==""&!df_in[,s_con[j]]=="")],"",paste0("Soil is ",df_in[,s_dis[j]],df_in[,s_con[j]]),
paste("Soil is",df_in[,s_dis[j]],"and", df_in[,s_con[j]]))
,"; ",
ifelse(df_in[,ra[j]]=="","",paste0("Root abundance is ",df_in[,ra[j]])),"; ",
ifelse(is.na(df_in[,tt[j]]),"No Thatch",paste0("Thatch thickness is ",df_in[,tt[j]]," cm")),
ifelse(is.na(df_in[,tt[j]])|df_in[,tt[j]]==0, "", paste0("; Accretion measured to ", df_in[,abv_t[j]]," thatch")),
ifelse(df_in[,other[j]]=="", "", paste0("; ", df_in[,other[j]])))
}
cims_output$Notes<-rep(unlist(txt),each=4)
#clean up
who<-which(unlist(sapply(cims_output,function(x)length(x)))==0)
for(i in who)cims_output[[i]]<-rep(NA,12)
rmv<-which(cims_output$`Core Conditions`=="core_not_sampled")
out_df<-as.data.frame(cims_output,check.names = F)
#write it out
out_path<-paste0(paste(paste0(path,"Output/USGS"),df_in[,site_column],paste0("ACC",df_in$`Plot Set`),format(dt,"%Y_%m_%d"),sep ="_"),".xlsx")
sheets<-list("Survey123_rawdata"=df_in,"CIMS"=out_df[-rmv,])
write_xlsx(sheets,out_path,format_headers = F)
}
file
file=2
#create output data.frame
cims_output<-sapply(output_names,function(x)NULL)
df_in<-input_data[file,]
plt_stf<-paste(df_in[,site_column],
c(df_in$`Station A`,df_in$`Station B`,df_in$`Station C`),sep="-")
plt_stf
#cleanup the "finished" tag
cims_output$`Station ID`<-rep(sapply(strsplit(plt_stf,"_"),"[",1),each=4)
cims_output
#Group
cims_output$Group<-rep(df_in$`Plot Set`,12)
#sample date
dt<-as.POSIXct(df_in[,sample_date_column],tz = "GMT",format="%m/%d/%y %H:%M")
if(is.na(dt))dt<-as.POSIXct(df_in[,sample_date_column],tz = "GMT",format="%m/%d/%Y %H:%M")
cims_output$`Sample Date (mm/dd/yyyy)`<-rep(format(dt,"%m/%d/%Y"),12)
CST_time<-dt-(6*60*60)
cims_output$`Sample Time (hh:mm)`<-rep(format(CST_time,tz="GMT",format = "%H:%M"),12)
#Establishment Date and time
#use ref_list
who<-which(ref_list[[df_in$`Plot Set`]]$Site.ID==df_in[,site_column])
cims_output$`Establishment Date (mm/dd/yyyy)`<-rep(ref_list[[df_in$`Plot Set`]]$Estab.Date[who],12)
cims_output$`Establishment Time (hh:mm)`<-rep(ref_list[[df_in$`Plot Set`]]$Estab.Time[who],12)
#Time Zone
cims_output$`Time Zone`<-rep("CST",12)
#Measuresments (will inform Core X:Y)
who<-grep("Measurement",names(df_in))
mss<-matrix(as.numeric(df_in[,who]),nrow=12,ncol=4,byrow = T)
rownames(mss)<-paste(rep(c("s1","s2","s3"),each=4),paste0("core",c("1","2","3","alt")),sep = "_")
#dims<-matrix(c(1,2,3,5,6,7,9,10,11),nrow=3,ncol=3)
#dims_new<-matrix(c(1:9),nrow=3,ncol=3)
#need_alt<-rep(NA,3)
#for(i in 1:3){
#  temp<-any(ans<-apply(mss[dims[,i],],1,function(x)all(is.na(x))))
#  if(temp&!all(is.na(mss[as.numeric(max(dims[,i])+1),]))){
#    mss_new[dims_new[,i][min(which(ans))],]<-mss[as.numeric(max(dims[,i])+1),]
#    need_alt[i]<-dims_new[,i][min(which(ans))]
#  }
#}
cims_output$`Accretion Measurement 1 (mm)`<-unname(mss[,1])
cims_output$`Accretion Measurement 2 (mm)`<-unname(mss[,2])
cims_output$`Accretion Measurement 3 (mm)`<-unname(mss[,3])
cims_output$`Accretion Measurement 4 (mm)`<-unname(mss[,4])
cims_output
#Core x:y
who<-grep("Core Coordinates",names(df_in))
who
core_cord<-as.character(df_in[,who])
#core_cord[which(core_cord=="")]<-NA
#  if(!is.na(need_alt[1]))core_cord[need_alt[1]]<-df_in[who[4]]
#  if(!is.na(need_alt[2]))core_cord[need_alt[2]]<-df_in[who[8]]
#  if(!is.na(need_alt[3]))core_cord[need_alt[3]]<-df_in[who[12]]
cims_output$`Core X:Y`<-unname(core_cord)
cims_output
#Core conditions
who<-grep("Condition",names(df_in))
cond_2<-as.character(df_in[,who])
cond_2
cond_2[cond_2=="NA"]<-""
cond_2
#core_cond[which(core_cond=="")]<-NA
#if(!is.na(need_alt[1]))core_cond[need_alt[1]]<-df_in[who[4]]
#if(!is.na(need_alt[2]))core_cond[need_alt[2]]<-df_in[who[8]]
#if(!is.na(need_alt[3]))core_cond[need_alt[3]]<-df_in[who[12]]
tst<-apply(mss,1,function(x)sum(!is.na(x)))
tst
feld<-grep("Feldspar Quality",names(df_in))
feld_q<-as.character(df_in[,feld])
cond_1<-rep("",12)
feld_q
feld_q
feld_q[feld_q==""]
feld_q[feld_q==""]<-"core_not_sampled"
cond_1<-rep("",12)
cond_1[feld_q=="solid"&tst==4]<-"Excellent (solid feldspar; n=4)"
cond_1[feld_q=="broken"&tst==4]<-"Good (broken feldspar; n=4)"
cond_1[feld_q=="broken"&tst==3]<-"Fair (broken feldspar; n=3)"
cond_1[feld_q=="broken"&tst==2]<-"Poor (broken feldspar; n=2)"
cond_1[feld_q=="broken"&tst==1]<-"Poor (broken feldspar; n=1)"
cond_1[tst==0]<-"No Feldspar"
core_cond<-rep("",12)
core_cond[cond_2==""]<-cond_1[cond_2==""]
core_cond[!cond_2==""]<-paste0(cond_1,"; ",cond_2)[!cond_2==""]
#core_cond[feld_q=="none"]<-"none"
core_cond[feld_q=="core_not_sampled"]<-"core_not_sampled"
cims_output$`Core Conditions`<-core_cond
cims_output
#Organization
org<-structure("U.S. GEOL SURVEY (USGS)",names=df_in$Organization)
if(df_in$Organization%in%names(org))cims_output$Organization<-rep(structure(org[df_in$Organization],names=NULL),12) else
cims_output$Organization<-rep(df_in$Organization,12)
#Personnel
cims_output$Personnel<-rep(df_in$`Field Personnel`,12)
#Notes
fld<-grep("If not flooded",names(df_in))
wd<-grep("Water depth",names(df_in))
vh<-grep("Vegetation Health",names(df_in))
dvs<-grep("Dominant Vegetation Species",names(df_in))
distr<-grep("Disturbance",names(df_in))
s_dis<-grep("Soil Description",names(df_in))
s_con<-grep("Soil Consistency",names(df_in))
ra<-grep("Root Abundance",names(df_in))
tt<-grep( "Thatch Thickness",names(df_in))
abv_t<-grep("above or below",names(df_in))
other<-grep("Other Notes",names(df_in))
txt<-list()
for(j in 1:3){
txt[[j]]<-paste0("Site is ",ifelse(df_in[,fld[j]]=="","flooded",df_in[,fld[j]]),"; ",
"Water depth is ",df_in[,wd[j]]," cm; ",
"Vegetation is ", df_in[,vh[j]],"; ",
"Dominant species is ",df_in[,dvs[j]],"; ",
ifelse(df_in[,distr[j]]=="none"|df_in[,distr[j]]=="","No Disturbance",paste0("Disturbance is ",df_in[,distr[j]])),"; ",
switch(c(1:3)[c(df_in[,s_dis[j]]==""&df_in[,s_con[j]]=="",
(df_in[,s_dis[j]]==""&!df_in[,s_con[j]]=="")|(!df_in[,s_dis[j]]==""&df_in[,s_con[j]]==""),
!df_in[,s_dis[j]]==""&!df_in[,s_con[j]]=="")],"",paste0("Soil is ",df_in[,s_dis[j]],df_in[,s_con[j]]),
paste("Soil is",df_in[,s_dis[j]],"and", df_in[,s_con[j]]))
,"; ",
ifelse(df_in[,ra[j]]=="","",paste0("Root abundance is ",df_in[,ra[j]])),"; ",
ifelse(is.na(df_in[,tt[j]]),"No Thatch",paste0("Thatch thickness is ",df_in[,tt[j]]," cm")),
ifelse(is.na(df_in[,tt[j]])|df_in[,tt[j]]==0, "", paste0("; Accretion measured to ", df_in[,abv_t[j]]," thatch")),
ifelse(df_in[,other[j]]=="", "", paste0("; ", df_in[,other[j]])))
}
cims_output$Notes<-rep(unlist(txt),each=4)
#clean up
who<-which(unlist(sapply(cims_output,function(x)length(x)))==0)
who
rmv<-which(cims_output$`Core Conditions`=="core_not_sampled")
rmv
out_df<-as.data.frame(cims_output,check.names = F)
out_df[-rmv,]
#load plot reference data
path<-"/Volumes/Ratatoskr/Survey123_parse/Accretion/"
ref_file<-dir(paste0(path,"Input"))
ref_file<-ref_file[grep("reference",ref_file)]
nms<-paste0("PS",1:7)
ref_list<-list()
for(i in 1:length(ref_file))ref_list[[i]]<-read.csv(paste0(path,"Input/",ref_file[i]))
names(ref_list)<-nms
input_data<-read.csv(paste0(path,"/Input/Acc2023_Survey123data.csv"),check.names = F)
output_names<-c("Station ID","Group","Sample Date (mm/dd/yyyy)",
"Sample Time (hh:mm)","Establishment Date (mm/dd/yyyy)",
"Establishment Time (hh:mm)","Time Zone",	"Core X:Y",
"Accretion Measurement 1 (mm)",	"Accretion Measurement 2 (mm)",
"Accretion Measurement 3 (mm)",	"Accretion Measurement 4 (mm)",
"Core Conditions","Organization",	"Personnel", "Notes")
#find where site is listed
site_column<-grep("Site",names(input_data))
sample_date_column<-grep("Time",names(input_data))
len<-dim(input_data)[1]
for(file in 1:len){
#create output data.frame
cims_output<-sapply(output_names,function(x)NULL)
df_in<-input_data[file,]
#Station ID
plt_stf<-paste(df_in[,site_column],
c(df_in$`Station A`,df_in$`Station B`,df_in$`Station C`),sep="-")
#cleanup the "finished" tag
cims_output$`Station ID`<-rep(sapply(strsplit(plt_stf,"_"),"[",1),each=4)
#Group
cims_output$Group<-rep(df_in$`Plot Set`,12)
#sample date
dt<-as.POSIXct(df_in[,sample_date_column],tz = "GMT",format="%m/%d/%y %H:%M")
if(is.na(dt))dt<-as.POSIXct(df_in[,sample_date_column],tz = "GMT",format="%m/%d/%Y %H:%M")
cims_output$`Sample Date (mm/dd/yyyy)`<-rep(format(dt,"%m/%d/%Y"),12)
CST_time<-dt-(6*60*60)
cims_output$`Sample Time (hh:mm)`<-rep(format(CST_time,tz="GMT",format = "%H:%M"),12)
#Establishment Date and time
#use ref_list
who<-which(ref_list[[df_in$`Plot Set`]]$Site.ID==df_in[,site_column])
cims_output$`Establishment Date (mm/dd/yyyy)`<-rep(ref_list[[df_in$`Plot Set`]]$Estab.Date[who],12)
cims_output$`Establishment Time (hh:mm)`<-rep(ref_list[[df_in$`Plot Set`]]$Estab.Time[who],12)
#Time Zone
cims_output$`Time Zone`<-rep("CST",12)
#Measuresments (will inform Core X:Y)
who<-grep("Measurement",names(df_in))
mss<-matrix(as.numeric(df_in[,who]),nrow=12,ncol=4,byrow = T)
rownames(mss)<-paste(rep(c("s1","s2","s3"),each=4),paste0("core",c("1","2","3","alt")),sep = "_")
#mss_new<-mss[c(1,2,3,5,6,7,9,10,11),]
#dims<-matrix(c(1,2,3,5,6,7,9,10,11),nrow=3,ncol=3)
#dims_new<-matrix(c(1:9),nrow=3,ncol=3)
#need_alt<-rep(NA,3)
#for(i in 1:3){
#  temp<-any(ans<-apply(mss[dims[,i],],1,function(x)all(is.na(x))))
#  if(temp&!all(is.na(mss[as.numeric(max(dims[,i])+1),]))){
#    mss_new[dims_new[,i][min(which(ans))],]<-mss[as.numeric(max(dims[,i])+1),]
#    need_alt[i]<-dims_new[,i][min(which(ans))]
#  }
#}
cims_output$`Accretion Measurement 1 (mm)`<-unname(mss[,1])
cims_output$`Accretion Measurement 2 (mm)`<-unname(mss[,2])
cims_output$`Accretion Measurement 3 (mm)`<-unname(mss[,3])
cims_output$`Accretion Measurement 4 (mm)`<-unname(mss[,4])
#Core x:y
who<-grep("Core Coordinates",names(df_in))
core_cord<-as.character(df_in[,who])
#core_cord[which(core_cord=="")]<-NA
#  if(!is.na(need_alt[1]))core_cord[need_alt[1]]<-df_in[who[4]]
#  if(!is.na(need_alt[2]))core_cord[need_alt[2]]<-df_in[who[8]]
#  if(!is.na(need_alt[3]))core_cord[need_alt[3]]<-df_in[who[12]]
cims_output$`Core X:Y`<-unname(core_cord)
#Core conditions
who<-grep("Condition",names(df_in))
cond_2<-as.character(df_in[,who])
cond_2[cond_2=="NA"]<-""
#core_cond[which(core_cond=="")]<-NA
#if(!is.na(need_alt[1]))core_cond[need_alt[1]]<-df_in[who[4]]
#if(!is.na(need_alt[2]))core_cond[need_alt[2]]<-df_in[who[8]]
#if(!is.na(need_alt[3]))core_cond[need_alt[3]]<-df_in[who[12]]
tst<-apply(mss,1,function(x)sum(!is.na(x)))
feld<-grep("Feldspar Quality",names(df_in))
feld_q<-as.character(df_in[,feld])
feld_q[feld_q==""]<-"core_not_sampled"
cond_1<-rep("",12)
cond_1[feld_q=="solid"&tst==4]<-"Excellent (solid feldspar; n=4)"
cond_1[feld_q=="broken"&tst==4]<-"Good (broken feldspar; n=4)"
cond_1[feld_q=="broken"&tst==3]<-"Fair (broken feldspar; n=3)"
cond_1[feld_q=="broken"&tst==2]<-"Poor (broken feldspar; n=2)"
cond_1[feld_q=="broken"&tst==1]<-"Poor (broken feldspar; n=1)"
cond_1[tst==0]<-"No Feldspar"
core_cond<-rep("",12)
core_cond[cond_2==""]<-cond_1[cond_2==""]
core_cond[!cond_2==""]<-paste0(cond_1,"; ",cond_2)[!cond_2==""]
#core_cond[feld_q=="none"]<-"none"
core_cond[feld_q=="core_not_sampled"]<-"core_not_sampled"
cims_output$`Core Conditions`<-core_cond
#Organization
org<-structure("U.S. GEOL SURVEY (USGS)",names=df_in$Organization)
if(df_in$Organization%in%names(org))cims_output$Organization<-rep(structure(org[df_in$Organization],names=NULL),12) else
cims_output$Organization<-rep(df_in$Organization,12)
#Personnel
cims_output$Personnel<-rep(df_in$`Field Personnel`,12)
#Notes
fld<-grep("If not flooded",names(df_in))
wd<-grep("Water depth",names(df_in))
vh<-grep("Vegetation Health",names(df_in))
dvs<-grep("Dominant Vegetation Species",names(df_in))
distr<-grep("Disturbance",names(df_in))
s_dis<-grep("Soil Description",names(df_in))
s_con<-grep("Soil Consistency",names(df_in))
ra<-grep("Root Abundance",names(df_in))
tt<-grep( "Thatch Thickness",names(df_in))
abv_t<-grep("above or below",names(df_in))
other<-grep("Other Notes",names(df_in))
txt<-list()
for(j in 1:3){
txt[[j]]<-paste0("Site is ",ifelse(df_in[,fld[j]]=="","flooded",df_in[,fld[j]]),"; ",
"Water depth is ",df_in[,wd[j]]," cm; ",
"Vegetation is ", df_in[,vh[j]],"; ",
"Dominant species is ",df_in[,dvs[j]],"; ",
ifelse(df_in[,distr[j]]=="none"|df_in[,distr[j]]=="","No Disturbance",paste0("Disturbance is ",df_in[,distr[j]])),"; ",
switch(c(1:3)[c(df_in[,s_dis[j]]==""&df_in[,s_con[j]]=="",
(df_in[,s_dis[j]]==""&!df_in[,s_con[j]]=="")|(!df_in[,s_dis[j]]==""&df_in[,s_con[j]]==""),
!df_in[,s_dis[j]]==""&!df_in[,s_con[j]]=="")],"",paste0("Soil is ",df_in[,s_dis[j]],df_in[,s_con[j]]),
paste("Soil is",df_in[,s_dis[j]],"and", df_in[,s_con[j]]))
,"; ",
ifelse(df_in[,ra[j]]=="","",paste0("Root abundance is ",df_in[,ra[j]])),"; ",
ifelse(is.na(df_in[,tt[j]]),"No Thatch",paste0("Thatch thickness is ",df_in[,tt[j]]," cm")),
ifelse(is.na(df_in[,tt[j]])|df_in[,tt[j]]==0, "", paste0("; Accretion measured to ", df_in[,abv_t[j]]," thatch")),
ifelse(df_in[,other[j]]=="", "", paste0("; ", df_in[,other[j]])))
}
cims_output$Notes<-rep(unlist(txt),each=4)
#clean up
who<-which(unlist(sapply(cims_output,function(x)length(x)))==0)
for(i in who)cims_output[[i]]<-rep(NA,12)
rmv<-which(cims_output$`Core Conditions`=="core_not_sampled")
out_df<-as.data.frame(cims_output,check.names = F)
#write it out
out_path<-paste0(paste(paste0(path,"Output/USGS"),df_in[,site_column],paste0("ACC",df_in$`Plot Set`),format(dt,"%Y_%m_%d"),sep ="_"),".xlsx")
sheets<-list("Survey123_rawdata"=df_in,"CIMS"=out_df[-rmv,])
write_xlsx(sheets,out_path,format_headers = F)
}
#This code is used to created figures from the samples of model 2
#load rjags library to read the saved coda-class posterior distributions
library(rjags)
#load site-level estimates
beta_samps_site<-readRDS("Output/Results/mod3_site_samples_beta.rds")
alpha_samps_site<-readRDS("Output/Results/mod3_site_samples_intercepts.rds")
prov_by_site<-readRDS("Output/Results/prov_by_site.RData")
setwd("/Volumes/Ratatoskr/Work/CRMSWork/SVI_Storms/coastal_land_change_rate/")
#load site-level estimates
beta_samps_site<-readRDS("Output/Results/mod3_site_samples_beta.rds")
alpha_samps_site<-readRDS("Output/Results/mod3_site_samples_intercepts.rds")
prov_by_site<-readRDS("Output/Results/prov_by_site.RData")
#load province-based estimates
samps_b_prov<-readRDS("Output/Results/mod3_prov_samples.rds")
alpha_summary<-summary(alpha_samps_site)
alpha_prov<-tapply(alpha_summary$quantiles[,"50%"],prov_by_site,mean)
#load data from analysis
df1 <- read.csv("Data/combined_data_for_analysis.csv")
mod3_preds<-readRDS("Output/Results/mod3_mu_samples.rds")
#load site and basin names
bas_by_site<-readRDS("Output/Results/basin_by_site.rds")
site_list<-readRDS("Output/Results/site_list.rds")
basin_list<-readRDS("Output/Results/basin_list.rds")
b_prov <- summary(samps_b_prov)
####Figure 5: Interaction plot####
ixn_plot<-readRDS("Output/Results/mod3_interaction_plot.rds")
inx_sum<-summary(ixn_plot)
x11(height = 10,width = 6)
par(mfrow=c(2,1))
ptd_raw<-(0.4719979+seq(-1,1,by=.5)*0.3023007)
plot(1:21,alpha_prov[1]+inx_sum$quantiles[grep("c.low",rownames(inx_sum$quantiles)),"50%"],type = "l",
bty="l",xaxt="n",ylab="Land Change Rate (ha/yr)",xlab="Percent Time Drained",main="Chenier Plain",ylim=c(-2,3.5))
polygon(c(1:21,rev(1:21)),alpha_prov[1]+c(inx_sum$quantiles[grep("c.low2",rownames(inx_sum$quantiles)),"2.5%"],
rev(inx_sum$quantiles[grep("c.low2",rownames(inx_sum$quantiles)),"97.5%"])),
col = adjustcolor("lightgrey",alpha.f=0.5),border=NA)
lines(1:21,alpha_prov[1]+inx_sum$quantiles[grep("c.low2",rownames(inx_sum$quantiles)),"50%"],type = "l",lwd=2)
axis(side = 1,at = c(1,6,11,16,21),labels = round(ptd_raw,1))
polygon(c(1:21,rev(1:21)),alpha_prov[1]+c(inx_sum$quantiles[grep("c.high2",rownames(inx_sum$quantiles)),"2.5%"],
rev(inx_sum$quantiles[grep("c.high2",rownames(inx_sum$quantiles)),"97.5%"])),
col=adjustcolor("lightblue",alpha.f=0.5),border = NA)
lines(1:21,alpha_prov[1]+inx_sum$quantiles[grep("c.high2",rownames(inx_sum$quantiles)),"50%"],type = "l",lty=2,lwd=2)
#Delta
mtext("(a)",side = 3,adj=0,padj=-1)
plot(1:21,alpha_prov[2]+inx_sum$quantiles[grep("d.low2",rownames(inx_sum$quantiles)),"50%"],type = "l",bty="l",xaxt="n",
ylab="",xlab="Percent Time Drained",main = "Delta Plain",ylim=c(-2,3.5))
polygon(c(1:21,rev(1:21)),alpha_prov[2]+c(inx_sum$quantiles[grep("d.low2",rownames(inx_sum$quantiles)),"2.5%"],
rev(inx_sum$quantiles[grep("d.low2",rownames(inx_sum$quantiles)),"97.5%"])),
col = adjustcolor("lightgrey",alpha.f=0.5),border=NA)
lines(1:21,alpha_prov[2]+inx_sum$quantiles[grep("d.low",rownames(inx_sum$quantiles)),"50%"],type = "l",lwd=2)
polygon(c(1:21,rev(1:21)),alpha_prov[2]+c(inx_sum$quantiles[grep("d.high2",rownames(inx_sum$quantiles)),"2.5%"],
rev(inx_sum$quantiles[grep("d.high2",rownames(inx_sum$quantiles)),"97.5%"])),
col=adjustcolor("lightblue",alpha.f=0.5),border = NA)
lines(1:21,alpha_prov[2]+inx_sum$quantiles[grep("d.high",rownames(inx_sum$quantiles)),"50%"],type = "l",lty=2,lwd=2)
axis(side = 1,at = c(1,6,11,16,21),labels = round(ptd_raw,1))
mtext("(b)",side = 3,adj=0,padj=-1)
legend("topright",c("Calm (8.23 pa)","Stormy (149.44 pa)"),title="Storminess",lty=c(1,2),bty="n",lwd=2,xpd = T)
pdf("Output/Fig_5.pdf",height = 10,width = 5)
par(mfrow=c(2,1))
ptd_raw<-(0.4719979+seq(-1,1,by=.5)*0.3023007)
plot(1:21,alpha_prov[1]+inx_sum$quantiles[grep("c.low",rownames(inx_sum$quantiles)),"50%"],type = "l",
bty="l",xaxt="n",ylab="Land Change Rate (ha/yr)",xlab="Percent Time Drained",main="Chenier Plain",ylim=c(-2,3.5))
polygon(c(1:21,rev(1:21)),alpha_prov[1]+c(inx_sum$quantiles[grep("c.low2",rownames(inx_sum$quantiles)),"2.5%"],
rev(inx_sum$quantiles[grep("c.low2",rownames(inx_sum$quantiles)),"97.5%"])),
col = adjustcolor("lightgrey",alpha.f=0.5),border=NA)
lines(1:21,alpha_prov[1]+inx_sum$quantiles[grep("c.low2",rownames(inx_sum$quantiles)),"50%"],type = "l",lwd=2)
axis(side = 1,at = c(1,6,11,16,21),labels = round(ptd_raw,1))
polygon(c(1:21,rev(1:21)),alpha_prov[1]+c(inx_sum$quantiles[grep("c.high2",rownames(inx_sum$quantiles)),"2.5%"],
rev(inx_sum$quantiles[grep("c.high2",rownames(inx_sum$quantiles)),"97.5%"])),
col=adjustcolor("lightblue",alpha.f=0.5),border = NA)
lines(1:21,alpha_prov[1]+inx_sum$quantiles[grep("c.high2",rownames(inx_sum$quantiles)),"50%"],type = "l",lty=2,lwd=2)
#Delta
mtext("(a)",side = 3,adj=0,padj=-1)
plot(1:21,alpha_prov[2]+inx_sum$quantiles[grep("d.low2",rownames(inx_sum$quantiles)),"50%"],type = "l",bty="l",xaxt="n",
ylab="",xlab="Percent Time Drained",main = "Delta Plain",ylim=c(-2,3.5))
polygon(c(1:21,rev(1:21)),alpha_prov[2]+c(inx_sum$quantiles[grep("d.low2",rownames(inx_sum$quantiles)),"2.5%"],
rev(inx_sum$quantiles[grep("d.low2",rownames(inx_sum$quantiles)),"97.5%"])),
col = adjustcolor("lightgrey",alpha.f=0.5),border=NA)
lines(1:21,alpha_prov[2]+inx_sum$quantiles[grep("d.low",rownames(inx_sum$quantiles)),"50%"],type = "l",lwd=2)
polygon(c(1:21,rev(1:21)),alpha_prov[2]+c(inx_sum$quantiles[grep("d.high2",rownames(inx_sum$quantiles)),"2.5%"],
rev(inx_sum$quantiles[grep("d.high2",rownames(inx_sum$quantiles)),"97.5%"])),
col=adjustcolor("lightblue",alpha.f=0.5),border = NA)
lines(1:21,alpha_prov[2]+inx_sum$quantiles[grep("d.high",rownames(inx_sum$quantiles)),"50%"],type = "l",lty=2,lwd=2)
axis(side = 1,at = c(1,6,11,16,21),labels = round(ptd_raw,1))
mtext("(b)",side = 3,adj=0,padj=-1)
legend("topright",c("Calm (8.23 pa)","Stormy (149.44 pa)"),title="Storminess",lty=c(1,2),bty="n",lwd=2,xpd = T)
dev.off()
